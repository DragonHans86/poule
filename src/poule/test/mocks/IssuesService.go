package mocks

import "github.com/stretchr/testify/mock"

import "github.com/google/go-github/github"

// IssuesService is an autogenerated mock type for the IssuesService type
type IssuesService struct {
	mock.Mock
}

// AddLabelsToIssue provides a mock function with given fields: owner, repo, number, labels
func (_m *IssuesService) AddLabelsToIssue(owner string, repo string, number int, labels []string) ([]*github.Label, *github.Response, error) {
	ret := _m.Called(owner, repo, number, labels)

	var r0 []*github.Label
	if rf, ok := ret.Get(0).(func(string, string, int, []string) []*github.Label); ok {
		r0 = rf(owner, repo, number, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Label)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(string, string, int, []string) *github.Response); ok {
		r1 = rf(owner, repo, number, labels)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, int, []string) error); ok {
		r2 = rf(owner, repo, number, labels)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateComment provides a mock function with given fields: owner, repo, number, comment
func (_m *IssuesService) CreateComment(owner string, repo string, number int, comment *github.IssueComment) (*github.IssueComment, *github.Response, error) {
	ret := _m.Called(owner, repo, number, comment)

	var r0 *github.IssueComment
	if rf, ok := ret.Get(0).(func(string, string, int, *github.IssueComment) *github.IssueComment); ok {
		r0 = rf(owner, repo, number, comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.IssueComment)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(string, string, int, *github.IssueComment) *github.Response); ok {
		r1 = rf(owner, repo, number, comment)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, int, *github.IssueComment) error); ok {
		r2 = rf(owner, repo, number, comment)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteComment provides a mock function with given fields: owner, repo, id
func (_m *IssuesService) DeleteComment(owner string, repo string, id int) (*github.Response, error) {
	ret := _m.Called(owner, repo, id)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(string, string, int) *github.Response); ok {
		r0 = rf(owner, repo, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(owner, repo, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Edit provides a mock function with given fields: owner, repo, number, issue
func (_m *IssuesService) Edit(owner string, repo string, number int, issue *github.IssueRequest) (*github.Issue, *github.Response, error) {
	ret := _m.Called(owner, repo, number, issue)

	var r0 *github.Issue
	if rf, ok := ret.Get(0).(func(string, string, int, *github.IssueRequest) *github.Issue); ok {
		r0 = rf(owner, repo, number, issue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Issue)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(string, string, int, *github.IssueRequest) *github.Response); ok {
		r1 = rf(owner, repo, number, issue)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, int, *github.IssueRequest) error); ok {
		r2 = rf(owner, repo, number, issue)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Get provides a mock function with given fields: owner, repo, number
func (_m *IssuesService) Get(owner string, repo string, number int) (*github.Issue, *github.Response, error) {
	ret := _m.Called(owner, repo, number)

	var r0 *github.Issue
	if rf, ok := ret.Get(0).(func(string, string, int) *github.Issue); ok {
		r0 = rf(owner, repo, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Issue)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(string, string, int) *github.Response); ok {
		r1 = rf(owner, repo, number)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, int) error); ok {
		r2 = rf(owner, repo, number)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListByRepo provides a mock function with given fields: owner, repo, opt
func (_m *IssuesService) ListByRepo(owner string, repo string, opt *github.IssueListByRepoOptions) ([]*github.Issue, *github.Response, error) {
	ret := _m.Called(owner, repo, opt)

	var r0 []*github.Issue
	if rf, ok := ret.Get(0).(func(string, string, *github.IssueListByRepoOptions) []*github.Issue); ok {
		r0 = rf(owner, repo, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Issue)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(string, string, *github.IssueListByRepoOptions) *github.Response); ok {
		r1 = rf(owner, repo, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, *github.IssueListByRepoOptions) error); ok {
		r2 = rf(owner, repo, opt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListComments provides a mock function with given fields: owner, repo, number, opt
func (_m *IssuesService) ListComments(owner string, repo string, number int, opt *github.IssueListCommentsOptions) ([]*github.IssueComment, *github.Response, error) {
	ret := _m.Called(owner, repo, number, opt)

	var r0 []*github.IssueComment
	if rf, ok := ret.Get(0).(func(string, string, int, *github.IssueListCommentsOptions) []*github.IssueComment); ok {
		r0 = rf(owner, repo, number, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.IssueComment)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(string, string, int, *github.IssueListCommentsOptions) *github.Response); ok {
		r1 = rf(owner, repo, number, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, int, *github.IssueListCommentsOptions) error); ok {
		r2 = rf(owner, repo, number, opt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListMilestones provides a mock function with given fields: owner, repo, opt
func (_m *IssuesService) ListMilestones(owner string, repo string, opt *github.MilestoneListOptions) ([]*github.Milestone, *github.Response, error) {
	ret := _m.Called(owner, repo, opt)

	var r0 []*github.Milestone
	if rf, ok := ret.Get(0).(func(string, string, *github.MilestoneListOptions) []*github.Milestone); ok {
		r0 = rf(owner, repo, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Milestone)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(string, string, *github.MilestoneListOptions) *github.Response); ok {
		r1 = rf(owner, repo, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, *github.MilestoneListOptions) error); ok {
		r2 = rf(owner, repo, opt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemoveLabelForIssue provides a mock function with given fields: owner, repo, number, label
func (_m *IssuesService) RemoveLabelForIssue(owner string, repo string, number int, label string) (*github.Response, error) {
	ret := _m.Called(owner, repo, number, label)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(string, string, int, string) *github.Response); ok {
		r0 = rf(owner, repo, number, label)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int, string) error); ok {
		r1 = rf(owner, repo, number, label)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
